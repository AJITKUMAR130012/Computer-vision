# -*- coding: utf-8 -*-
"""Computer_vision_Assignment1_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cG8k-D_HaiS5U-zTw0ejAF24ultyaYxU
"""

!git clone https://github.com/AJITKUMAR130012/Computer-vision.git

cd Computer-vision

cd Assignment1

import numpy as np
import pandas as pd
import cv2 
from skimage.transform import hough_circle, hough_circle_peaks
import matplotlib.pyplot as plt
from skimage import data, color
from skimage.draw import circle_perimeter
import matplotlib.pyplot as plt

img=cv2.imread("./Dataset/3/circle1.png")
gray=cv2.imread("./Dataset/3/circle1.png",0)

edges = cv2.Canny(gray,200,891,apertureSize=3,L2gradient =True)

plt.subplot(1,3,1)
plt.imshow(img)
plt.subplot(1,3,2)
plt.imshow(gray)
plt.subplot(1,3,3)
plt.imshow(edges)
plt.show()

print(img.shape)

# Guess the radius of the circle
hough_radii = np.arange(100, 400, 2)
# guess the circle for the given radius range on the edges
hough_res = hough_circle(edges, hough_radii)

accums, cx, cy, radii = hough_circle_peaks(hough_res, hough_radii,
                                           total_num_peaks=1)

cx,cy,radii

plt.subplot(1,2,1)
plt.imshow(img)
plt.show()
for center_y, center_x, radius in zip(cy, cx, radii):
    #circy, circx = circle_perimeter(center_y, center_x, radius,
    #                                shape=img.shape)
    #image[circy, circx] = (220, 20, 20)
    cv2.circle(img, (center_x, center_y), radius, (0, 255, 0), 2)
    cv2.circle(img, (center_x, center_y), 1, (0, 0, 255), 3)
plt.subplot(1,2,2)
plt.imshow(image)
plt.show()

"""#Perimeter"""

perimeter=2*np.pi*radii
print(perimeter)

"""# Area"""

area=np.pi*(radii**2)
print(area)

"""# 2nd methode using opencv"""

import numpy as np
import pandas as pd
import cv2
import matplotlib.pyplot as plt

img=cv2.imread("./Dataset/3/circle1.png")
gray=cv2.imread("./Dataset/3/circle1.png",0)

plt.subplot(1,2,1)
plt.imshow(img)
plt.subplot(1,2,2)
plt.imshow(gray)
plt.show()

blur=cv2.blur(gray,(3,3))

# Apply Hough transform on the blurred image.
detected_circles = cv2.HoughCircles(blur, 
                   cv2.HOUGH_GRADIENT, 1, 20, param1 = 200,
               param2 = 50, minRadius = 222, maxRadius = 250)
  
# Draw circles that are detected.

print(detected_circles)

i=0
if detected_circles is not None:
  
    # Convert the circle parameters a, b and r to integers.
    detected_circles = np.uint16(np.around(detected_circles))
    
    for pt in detected_circles[0, :]:
        a, b, r = pt[0], pt[1], pt[2]
        print(r)
  
        # Draw the circumference of the circle.
        cv2.circle(img, (a, b), r, (0, 255, 0), 2)
    
        # Draw a small circle (of radius 1) to show the center.
        cv2.circle(img, (a, b), 1, (0, 0, 255), 3)
        i=i+1
        if i==1:
            break
        
plt.imshow(img)

"""# Perimeter"""

per=2*np.pi*r
print(per)

"""# Area"""

area=np.pi*r*r
print(area)

