# -*- coding: utf-8 -*-
"""Computer_vision_Assignment1_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a3CgB_NCnySVyrW7TKq2hQdnlbTm5zr0
"""

!git clone https://github.com/AJITKUMAR130012/Computer-vision.git

cd Computer-vision

!ls

cd Assignment1

import numpy as np
import pandas as pd
import glob
import cv2
import matplotlib.pyplot as plt
import random

# traversethe image

path = glob.glob("./Dataset/5/*.jpg")
cv_img = []
for img in path:
    n = cv2.imread(img)
    cv_img.append(n)

print(len(cv_img))

"""# A.Resize all the image"""

for l,i in enumerate(cv_img):
    cv_img[l]=cv2.resize(i,(256,256))

#checking the size of each image:
for i in cv_img:
    print(i.shape)

"""# Convert them to gray"""

gray_cv_img=[]
for l,i in enumerate(cv_img):
    gray_cv_img.append(cv2.cvtColor(i, cv2.COLOR_BGR2GRAY))

"""# B.Average of All three image"""

avg_img=np.mean(cv_img,axis=0)

avg_img = avg_img.astype('int32')
avg_img.shape

plt.imshow(avg_img)
plt.show()

"""# B. Second methode for averaging"""

dst = cv_img[0]
for i in range(len(cv_img)):
    if i == 0:
        pass
    else:
        alpha = 1.0/(i + 1)
        beta = 1.0 - alpha
        dst = cv2.addWeighted(cv_img[i], alpha, dst, beta, 0.0)

plt.imshow(dst)
plt.show()

"""#C.Substract image1 to image2"""

# substraction done after the conversion into gray scale and resize into 256*256
subtracted = cv2.subtract(cv_img[0], cv_img[1])

plt.imshow(subtracted)
plt.show()

"""# D.Adding salt noise with 5% probability

Noise
Adding random disturbance into the image is known as image noise. salt and pepper noise:

1. Salt(White) noise adding into the dark region.
2. Pepper(Black) noise adding into the white region.
3. Salt and pepper noise are added to the gray scale image
"""

height, width= gray_cv_img[0].shape
salt_img=gray_cv_img[0]
plt.imshow(salt_img)
plt.show()

# adding the salt noise
size=int((256*256)*(5/100))
for i in range(size):
    y_cord=random.randint(0,height-1)
    x_cord=random.randint(0,width-1)
    salt_img[y_cord][x_cord]=255

plt.imshow(salt_img)
plt.show()

"""# E. Removing the salt noise
Median_Filter: Median filter is used to remove the salt and pepper noise.
"""

noise_free_img=cv2.medianBlur(salt_img,5)

plt.imshow(noise_free_img)
plt.show()

"""# F.Applying the convolutional on image"""

cnv_img=cv_img[0]
plt.imshow(cnv_img)
plt.show()

print(cnv_img.shape)

kernel=np.array([[-1, -1, -1],[0, 0, 0],[1, 1, 1]],dtype='float64')

dst=cv2.filter2D(cnv_img,-1,kernel)

plt.imshow(dst)
plt.show()

